name: android

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      ZIP_NAME: SalesMasterApp.zip
      UNZIP_DIR: project
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
      ANDROID_HOME: ${{ github.workspace }}/android-sdk
      ANDROID_PLATFORM: "platforms;android-34"
      ANDROID_BUILD_TOOLS: "build-tools;34.0.0"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify ZIP exists
        shell: bash
        run: |
          ls -la
          [[ -f "$ZIP_NAME" ]] || { echo "ZIP '$ZIP_NAME' not found in repo root"; exit 1; }

      - name: Unzip project
        shell: bash
        run: |
          rm -rf "$UNZIP_DIR"
          mkdir -p "$UNZIP_DIR"
          unzip -q "$ZIP_NAME" -d "$UNZIP_DIR"
          echo "Unzipped content:"
          ls -la "$UNZIP_DIR"

      - name: Detect Gradle project root
        id: gradleroot
        shell: bash
        run: |
          set -euo pipefail
          shopt -s globstar nullglob
          ROOT=""
          for f in \
            "$UNZIP_DIR"/**/settings.gradle "$UNZIP_DIR"/**/settings.gradle.kts \
            "$UNZIP_DIR"/**/build.gradle   "$UNZIP_DIR"/**/build.gradle.kts
          do
            if [[ -f "$f" ]]; then ROOT="$(dirname "$f")"; break; fi
          done
          [[ -n "$ROOT" ]] || { echo "Could not find a Gradle project in $UNZIP_DIR"; exit 1; }
          echo "root=$ROOT" >> "$GITHUB_OUTPUT"
          echo "Detected Gradle root: $ROOT"
          echo "Listing root:"
          ls -la "$ROOT"

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: gradle

      # Robust Android SDK install (handles 'Broken pipe' + retries)
      - name: Install Android SDK (cmdline-tools & packages)
        shell: bash
        run: |
          set -euo pipefail
          SDK="$ANDROID_SDK_ROOT"
          mkdir -p "$SDK/cmdline-tools"
          cd "$SDK"
          curl -L -o cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
          unzip -q cmdline-tools.zip -d cmdline-tools
          mv cmdline-tools/cmdline-tools cmdline-tools/latest
          rm -f cmdline-tools.zip
          export ANDROID_SDK_ROOT="$SDK"
          export ANDROID_HOME="$SDK"
          export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools:$PATH"
          command -v sdkmanager >/dev/null || { echo "sdkmanager not found"; exit 127; }
          set +e
          yes | sdkmanager --licenses
          echo "License acceptance exit (ignored): $?"
          set -e
          retry() { n=0; max=3; delay=5; until "$@"; do n=$((n+1)); (( n>=max )) && { echo "failed: $*"; return 1; }; echo "retry $n/$max..."; sleep $delay; done; }
          retry bash -c 'yes | sdkmanager --install "platform-tools" "${ANDROID_PLATFORM}" "${ANDROID_BUILD_TOOLS}" --sdk_root="$ANDROID_SDK_ROOT"'
          [[ -d "$ANDROID_SDK_ROOT/${ANDROID_BUILD_TOOLS//;/\/}" ]] || { echo "build-tools missing"; exit 1; }
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> "$GITHUB_ENV"
          echo "ANDROID_HOME=$ANDROID_HOME" >> "$GITHUB_ENV"
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> "$GITHUB_PATH"
          echo "$ANDROID_SDK_ROOT/platform-tools" >> "$GITHUB_PATH"
          echo "$ANDROID_SDK_ROOT/${ANDROID_BUILD_TOOLS//;/\/}" >> "$GITHUB_PATH"

      - name: Set up Gradle (cache & tools)
        uses: gradle/actions/setup-gradle@v3

      - name: Fix Gradle wrapper permissions (if present)
        if: ${{ steps.gradleroot.outputs.root != '' }}
        working-directory: ${{ steps.gradleroot.outputs.root }}
        shell: bash
        run: |
          if [[ -f ./gradlew ]]; then chmod +x ./gradlew; fi
          if [[ -f gradle/wrapper/gradle-wrapper.jar ]]; then chmod 644 gradle/wrapper/gradle-wrapper.jar; fi

      - name: Build Debug APK
        working-directory: ${{ steps.gradleroot.outputs.root }}
        shell: bash
        run: |
          set -euo pipefail
          if [[ -x ./gradlew ]]; then
            ./gradlew --version
            ./gradlew assembleDebug --stacktrace --no-daemon
          else
            echo "No gradlew; using system Gradle"
            gradle --version
            gradle assembleDebug --stacktrace --no-daemon
          fi

      - name: Upload Debug APK(s)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-apks
          path: ${{ steps.gradleroot.outputs.root }}/**/*.apk
          if-no-files-found: warn
