name: android

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  ZIP_NAME: SalesMasterApp.zip
  UNZIP_DIR: project
  SYSTEM_GRADLE_VERSION: 8.5

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify ZIP exists
        id: findzip
        shell: bash
        run: |
          set -e
          if [[ -f "$ZIP_NAME" ]]; then
            echo "zip=$ZIP_NAME" >> "$GITHUB_OUTPUT"
          else
            z=$(ls -1 *.zip 2>/dev/null | head -n1 || true)
            if [[ -z "$z" ]]; then
              echo "No .zip found in repo root"; exit 1
            fi
            echo "zip=$z" >> "$GITHUB_OUTPUT"
          fi
          echo "Using ZIP: $(sed -n 's/^zip=//p' "$GITHUB_OUTPUT")"

      - name: Unzip project
        run: |
          rm -rf "$UNZIP_DIR" && mkdir -p "$UNZIP_DIR"
          unzip -q "${{ steps.findzip.outputs.zip }}" -d "$UNZIP_DIR"
          find "$UNZIP_DIR" -maxdepth 2 -type f | head -200

      - name: Detect Gradle project root
        id: gradleroot
        shell: bash
        run: |
          set -e
          ROOT=""
          while IFS= read -r -d '' f; do ROOT="$(dirname "$f")"; break; done \
            < <(find "$UNZIP_DIR" -type f \( -name "settings.gradle" -o -name "settings.gradle.kts" \) -print0 | sort -z)
          if [[ -z "$ROOT" ]]; then
            while IFS= read -r -d '' f; do ROOT="$(dirname "$f")"; break; done \
              < <(find "$UNZIP_DIR" -type f \( -name "build.gradle" -o -name "build.gradle.kts" \) -print0 | sort -z)
          fi
          [[ -z "$ROOT" ]] && { echo "Could not find Gradle project"; exit 1; }
          echo "root=$ROOT" >> "$GITHUB_OUTPUT"
          echo "Detected Gradle root: $ROOT"

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Android platforms & build-tools
        shell: bash
        run: |
          set -e
          SDKMANAGER="$(command -v sdkmanager || true)"
          if [[ -z "$SDKMANAGER" ]]; then
            ANDROID_SDK_ROOT="${ANDROID_SDK_ROOT:-$HOME/Android/Sdk}"
            mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
            cd "$ANDROID_SDK_ROOT/cmdline-tools"
            curl -sSL https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -o clt.zip
            rm -rf latest temp && mkdir temp
            unzip -q -o clt.zip -d temp
            mv temp/cmdline-tools latest
            rm -rf temp clt.zip
            SDKMANAGER="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager"
          fi
          yes | "$SDKMANAGER" --licenses || true
          "$SDKMANAGER" "platform-tools" "platforms;android-34" "build-tools;34.0.0"

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: ${{ env.SYSTEM_GRADLE_VERSION }}
          cache-read-only: false

      - name: Fix Gradle wrapper permissions (if present)
        working-directory: ${{ steps.gradleroot.outputs.root }}
        shell: bash
        run: |
          [[ -f ./gradlew ]] && chmod +x ./gradlew
          [[ -d ./gradle/wrapper ]] && chmod -R u+rwX,go+rX ./gradle/wrapper || true

      # NEW: patch settings + repos to avoid "prefer settings repositories" failure
      - name: Patch repository policy & repos
        working-directory: ${{ steps.gradleroot.outputs.root }}
        shell: bash
        run: |
          set -e
          SFILE=""
          [[ -f settings.gradle.kts ]] && SFILE="settings.gradle.kts"
          [[ -z "$SFILE" && -f settings.gradle ]] && SFILE="settings.gradle"

          if [[ -n "$SFILE" ]]; then
            echo "Patching $SFILE"
            # If FAIL_ON_PROJECT_REPOS is set, relax it
            sed -i 's/RepositoriesMode\.FAIL_ON_PROJECT_REPOS/RepositoriesMode.PREFER_SETTINGS/g' "$SFILE" || true

            # Ensure pluginManagement & dependencyResolutionManagement have google() and mavenCentral()
            if ! grep -q 'pluginManagement' "$SFILE"; then
              cat >> "$SFILE" <<'EOF'

pluginManagement {
  repositories {
    google()
    mavenCentral()
    gradlePluginPortal()
  }
}
EOF
            fi

            if ! grep -q 'dependencyResolutionManagement' "$SFILE"; then
              cat >> "$SFILE" <<'EOF'

dependencyResolutionManagement {
  repositoriesMode.set(RepositoriesMode.PREFER_SETTINGS)
  repositories {
    google()
    mavenCentral()
  }
}
EOF
            fi
          fi

          # Also ensure module/build files have google + mavenCentral if missing
          for f in $(find . -name "build.gradle" -o -name "build.gradle.kts"); do
            if ! grep -q "mavenCentral()" "$f"; then
              echo "Ensuring repos in $f"
              printf '\nrepositories {\n    google()\n    mavenCentral()\n}\n' >> "$f"
            fi
          done

          # Provide sane defaults if missing
          if [[ ! -f gradle.properties ]]; then
            cat > gradle.properties <<'EOF'
org.gradle.jvmargs=-Xmx2g -Dfile.encoding=UTF-8
android.useAndroidX=true
android.enableJetifier=true
EOF
          fi

      - name: Build Debug APK
        working-directory: ${{ steps.gradleroot.outputs.root }}
        shell: bash
        run: |
          set -e
          if [[ -x ./gradlew ]]; then
            ./gradlew --no-daemon --stacktrace assembleDebug
          else
            echo "No wrapper found â€” using system Gradle $SYSTEM_GRADLE_VERSION"
            if gradle -q :app:tasks --all >/dev/null 2>&1; then
              gradle --no-daemon --stacktrace :app:assembleDebug
            else
              gradle --no-daemon --stacktrace assembleDebug
            fi
          fi

      - name: Upload Debug APK(s)
        uses: actions/upload-artifact@v4
        with:
          name: debug-apks
          path: |
            ${{ steps.gradleroot.outputs.root }}/**/build/outputs/apk/**/*.apk
          if-no-files-found: error
