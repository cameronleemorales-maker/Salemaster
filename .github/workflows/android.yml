name: android

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  ZIP_NAME: SalesMasterApp.zip
  UNZIP_DIR: project
  SYSTEM_GRADLE_VERSION: 8.5

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify ZIP exists
        id: findzip
        shell: bash
        run: |
          set -e
          if [[ -f "$ZIP_NAME" ]]; then
            echo "zip=$ZIP_NAME" >> "$GITHUB_OUTPUT"
          else
            z=$(ls -1 *.zip 2>/dev/null | head -n1 || true)
            [[ -z "$z" ]] && { echo "No .zip in repo root"; exit 1; }
            echo "zip=$z" >> "$GITHUB_OUTPUT"
          fi
          echo "Using ZIP: ${{ steps.findzip.outputs.zip }}"

      - name: Unzip project
        shell: bash
        run: |
          rm -rf "$UNZIP_DIR"
          mkdir -p "$UNZIP_DIR"
          unzip -q "${{ steps.findzip.outputs.zip }}" -d "$UNZIP_DIR"

   - name: Detect Gradle project root
        id: gradleroot
        shell: bash
        run: |
          set -euo pipefail
          shopt -s globstar nullglob
          ROOT=""
          for f in \
            "$UNZIP_DIR"/**/settings.gradle \
            "$UNZIP_DIR"/**/settings.gradle.kts \
            "$UNZIP_DIR"/**/build.gradle \
            "$UNZIP_DIR"/**/build.gradle.kts
          do
            if [[ -f "$f" ]]; then
              ROOT="$(dirname "$f")"
              break
            fi
          done
          if [[ -z "$ROOT" ]]; then
            echo "Could not find Gradle project"
            echo "Files under $UNZIP_DIR:"
            ls -la "$UNZIP_DIR" || true
            exit 1
          fi
          echo "root=$ROOT" >> "$GITHUB_OUTPUT"
          echo "Gradle root: $ROOT"

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Android SDK env
        uses: android-actions/setup-android@v3

      - name: Install Android platforms & build-tools
        shell: bash
        run: |
          set -e
          SDKMANAGER="$(command -v sdkmanager || true)"
          if [[ -z "$SDKMANAGER" ]]; then
            ANDROID_SDK_ROOT="${ANDROID_SDK_ROOT:-$HOME/Android/Sdk}"
            mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
            cd "$ANDROID_SDK_ROOT/cmdline-tools"
            curl -sSL https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -o clt.zip
            rm -rf latest temp && mkdir temp
            unzip -q -o clt.zip -d temp
            mv temp/cmdline-tools latest
            rm -rf temp clt.zip
            SDKMANAGER="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager"
          fi
          yes | "$SDKMANAGER" --licenses || true
          "$SDKMANAGER" "platform-tools" "platforms;android-34" "build-tools;34.0.0"

      - name: Set up Gradle (cache & tools)
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: ${{ env.SYSTEM_GRADLE_VERSION }}
          cache-read-only: false

      - name: Fix gradlew permissions (if present)
        working-directory: ${{ steps.gradleroot.outputs.root }}
        shell: bash
        run: |
          [[ -f ./gradlew ]] && chmod +x ./gradlew
          [[ -d ./gradle/wrapper ]] && chmod -R u+rwX,go+rX ./gradle/wrapper || true

      - name: Patch repo policy and repositories
        working-directory: ${{ steps.gradleroot.outputs.root }}
        shell: bash
        run: |
          set -e
          SFILE=""
          [[ -f settings.gradle.kts ]] && SFILE="settings.gradle.kts"
          [[ -z "$SFILE" && -f settings.gradle ]] && SFILE="settings.gradle"
          if [[ -n "$SFILE" ]]; then
            sed -i 's/RepositoriesMode\.FAIL_ON_PROJECT_REPOS/RepositoriesMode.PREFER_SETTINGS/g' "$SFILE" || true
            grep -q 'pluginManagement' "$SFILE" || printf '\npluginManagement {\n  repositories {\n    google()\n    mavenCentral()\n    gradlePluginPortal()\n  }\n}\n' >> "$SFILE"
            grep -q 'dependencyResolutionManagement' "$SFILE" || printf '\ndependencyResolutionManagement
