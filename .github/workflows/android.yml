name: android

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      ZIP_NAME: SalesMasterApp.zip
      UNZIP_DIR: project
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
      ANDROID_HOME: ${{ github.workspace }}/android-sdk
      ANDROID_PLATFORM: "platforms;android-34"
      ANDROID_BUILD_TOOLS: "build-tools;34.0.0"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify ZIP exists
        shell: bash
        run: |
          ls -la
          [[ -f "$ZIP_NAME" ]] || { echo "ZIP '$ZIP_NAME' not found in repo root."; exit 1; }

      - name: Unzip project
        shell: bash
        run: |
          rm -rf "$UNZIP_DIR"
          mkdir -p "$UNZIP_DIR"
          unzip -q "$ZIP_NAME" -d "$UNZIP_DIR"
          echo "Contents of $UNZIP_DIR:"; ls -la "$UNZIP_DIR"

      - name: Detect Gradle project root
        id: gradleroot
        shell: bash
        run: |
          set -euo pipefail
          shopt -s globstar nullglob
          ROOT=""
          for f in \
            "$UNZIP_DIR"/**/settings.gradle "$UNZIP_DIR"/**/settings.gradle.kts \
            "$UNZIP_DIR"/**/build.gradle   "$UNZIP_DIR"/**/build.gradle.kts
          do
            if [[ -f "$f" ]]; then ROOT="$(dirname "$f")"; break; fi
          done
          [[ -n "$ROOT" ]] || { echo "No Gradle project found."; exit 1; }
          echo "root=$ROOT" >> "$GITHUB_OUTPUT"
          echo "Gradle root: $ROOT"

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: gradle

      # ----- Robust Android SDK install (handles 'Broken pipe' & retries) -----
      - name: Install Android SDK (cmdline-tools & packages)
        shell: bash
        run: |
          set -euo pipefail

          SDK="$ANDROID_SDK_ROOT"
          mkdir -p "$SDK/cmdline-tools"
          cd "$SDK"

          echo "Downloading Android commandline-tools…"
          curl -L -o cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
          unzip -q cmdline-tools.zip -d cmdline-tools
          mv cmdline-tools/cmdline-tools cmdline-tools/latest
          rm -f cmdline-tools.zip

          # Make tools available *now* in this step
          export ANDROID_SDK_ROOT="$SDK"
          export ANDROID_HOME="$SDK"
          export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools:$PATH"

          echo "sdkmanager path: $(command -v sdkmanager || echo 'NOT FOUND')"
          command -v sdkmanager >/dev/null || { echo "sdkmanager not found after install"; exit 127; }

          echo "Accepting licenses (ignore Broken pipe)…"
          set +e
          yes | sdkmanager --licenses
          # capture and ignore nonzero from 'yes' broken pipe
          LIC_EXIT=$?
          set -e
          echo "License exit code: $LIC_EXIT (ignored)"

          retry() {
            local n=0 max=3 delay=5
            until "$@"; do
              n=$((n+1))
              if (( n >= max )); then
                echo "Command failed after $n attempts: $*"
                return 1
              fi
              echo "Retry $n/$max in ${delay}s: $*"
              sleep $delay
            done
          }

          echo "Installing platform-tools, platform, and build-tools…"
          retry bash -c 'yes | sdkmanager --install "platform-tools" "${ANDROID_PLATFORM}" "${ANDROID_BUILD_TOOLS}" --sdk_root="$ANDROID_SDK_ROOT"'

          echo "Verifying build-tools installed…"
          [[ -d "$ANDROID_SDK_ROOT/${ANDROID_BUILD_TOOLS//;/\/}" ]] || { echo "Build-tools not found."; ls -R "$ANDROID_SDK_ROOT" || true; exit 1; }

          # Persist for later steps
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> "$GITHUB_ENV"
          echo "ANDROID_HOME=$ANDROID_HOME" >> "$GITHUB_ENV"
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> "$GITHUB_PATH"
          echo "$ANDROID_SDK_ROOT/platform-tools" >> "$GITHUB_PATH"
          echo "$ANDROID_SDK_ROOT/${ANDROID_BUILD_TOOLS//;/\/}" >> "$GITHUB_PATH"
      # -----------------------------------------------------------------------

      - name: Set up Gradle (cache & tools)
        uses: gradle/actions/setup-gradle@v3

      - name: Fix Gradle wrapper permissions (if present)
        shell: bash
        run: |
          cd "${{ steps.gradleroot.outputs.root }}"
          [[ -f ./gradlew ]] && chmod +x ./gradlew
          [[ -f gradle/wrapper/gradle-wrapper.jar ]] && chmod 644 gradle/wrapper/gradle-wrapper.jar

      - name: Build Debug APK
        working-directory
