name: android

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      ZIP_NAME: SalesMasterApp.zip
      UNZIP_DIR: project
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
      ANDROID_HOME: ${{ github.workspace }}/android-sdk
      # Pick platform/build-tools you actually target; these are safe defaults:
      ANDROID_PLATFORM: "platforms;android-34"
      ANDROID_BUILD_TOOLS: "build-tools;34.0.0"

    steps:
      # 1) Checkout
      - name: Checkout
        uses: actions/checkout@v4

      # 2) Verify ZIP exists (exact name, case-sensitive)
      - name: Verify ZIP exists
        shell: bash
        run: |
          ls -la
          if [[ ! -f "$ZIP_NAME" ]]; then
            echo "ZIP '$ZIP_NAME' not found in repo root."
            exit 1
          fi

      # 3) Unzip to ./project
      - name: Unzip project
        shell: bash
        run: |
          rm -rf "$UNZIP_DIR"
          mkdir -p "$UNZIP_DIR"
          unzip -q "$ZIP_NAME" -d "$UNZIP_DIR"
          echo "Contents of $UNZIP_DIR:"
          ls -la "$UNZIP_DIR"

      # 4) Detect Gradle project root (no 'find' to avoid Unicode dash issues)
      - name: Detect Gradle project root
        id: gradleroot
        shell: bash
        run: |
          set -euo pipefail
          shopt -s globstar nullglob
          ROOT=""
          for f in \
            "$UNZIP_DIR"/**/settings.gradle \
            "$UNZIP_DIR"/**/settings.gradle.kts \
            "$UNZIP_DIR"/**/build.gradle \
            "$UNZIP_DIR"/**/build.gradle.kts
          do
            if [[ -f "$f" ]]; then
              ROOT="$(dirname "$f")"
              break
            fi
          done
          if [[ -z "$ROOT" ]]; then
            echo "Could not find a Gradle project (no settings.gradle or build.gradle found)."
            exit 1
          fi
          echo "root=$ROOT" >> "$GITHUB_OUTPUT"
          echo "Gradle root is: $ROOT"

      # 5) Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: gradle

      # 6) Install Android cmdline-tools + SDK bits (non-interactive)
      - name: Install Android SDK (cmdline-tools)
        shell: bash
        run: |
          set -euo pipefail
          SDK="$ANDROID_SDK_ROOT"
          mkdir -p "$SDK"/cmdline-tools
          cd "$SDK"

          # Download latest commandline tools
          curl -L -o cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
          unzip -q cmdline-tools.zip -d cmdline-tools
          mv cmdline-tools/cmdline-tools cmdline-tools/latest
          rm -f cmdline-tools.zip

          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> "$GITHUB_ENV"
          echo "ANDROID_HOME=$ANDROID_HOME" >> "$GITHUB_ENV"
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_PATH
          echo "$ANDROID_SDK_ROOT/build-tools/34.0.0" >> $GITHUB_PATH

          sdkmanager --version

          # Accept licenses (ignore broken pipe warnings if any)
          yes | sdkmanager --licenses || true

          # Install required packages
          yes | sdkmanager "platform-tools" "${ANDROID_PLATFORM}" "${ANDROID_BUILD_TOOLS}"

      # 7) Set up Gradle (cache & tools)
      - name: Set up Gradle (cache & tools)
        uses: gradle/actions/setup-gradle@v3

      # 8) Fix gradlew + wrapper permissions when present inside the zip
      - name: Fix Gradle wrapper permissions (if present)
        shell: bash
        run: |
          set -euo pipefail
          cd "${{ steps.gradleroot.outputs.root }}"
          if [[ -f "./gradlew" ]]; then
            chmod +x ./gradlew
          fi
          if [[ -f "gradle/wrapper/gradle-wrapper.jar" ]]; then
            chmod 644 gradle/wrapper/gradle-wrapper.jar
          fi

      # 9) Build Debug APK (use wrapper if present, else system Gradle)
      - name: Build Debug APK
        working-directory: ${{ steps.gradleroot.outputs.root }}
        shell: bash
        run: |
          set -euo pipefail
          if [[ -x "./gradlew" ]]; then
            ./gradlew --version
            ./gradlew assembleDebug --stacktrace --no-daemon
          else
            echo "No gradlew found; using system Gradle"
            gradle --version
            gradle assembleDebug --stacktrace --no-daemon
          fi

      # 10) Upload all APKs produced
      - name: Upload Debug APK(s)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-apks
          path: |
            ${{ steps.gradleroot.outputs.root }}/**/*.apk
          if-no-files-found: warn
